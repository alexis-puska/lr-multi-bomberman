#include "LevelService.h"

/*
0 -> libre
1 -> mur
2 -> brick

0  - Top Left      -> 1
1  - Top Right     -> 1
2  - Top 1         -> 1
3  - Top 2         -> 1
4  - Top 3         -> 1

5  - Bottom Left   -> 1
6  - Bottom Right  -> 1
7  - Bottom 1      -> 1
8  - Bottom 2      -> 1
9  - Bottom 3      -> 1

10 - Left 1        -> 1
11 - Left 2        -> 1
12 - Left 3        -> 1
13 - Right 1       -> 1
14 - Right 2       -> 1

15 - Right 3       -> 1
16 - Wall 1        -> 1
17 - Wall 2 (inv)  -> 1
18 - Ground        -> 1
19 - Ground Sh1    -> 1

20 - Ground Sh2    -> 1
21 - Bricks        -> 2
22 - Blow 1        -> 2
23 - Blow 2        -> 2
24 - Blow 3        -> 2

25 - Blow 4        -> 2
26 - Blow 5        -> 2
27 - Blow 6        -> 2
28 - Ext Ground 1  -> 0
29 - Ext Ground 2  -> 0

31 - Ext Ground 3  -> 0
31 - Ext Ground 4  -> 0
32 - Ext Ground 5  -> 0
33 - Ext Ground 6  -> 0
34 - Ext Ground 7  -> 0
35 - Ext Ground 8  -> 0

36 - Ext Ground 9  -> 0
37 - Ext Ground 10 -> 0
 
deathBonus		= 0,
rollerBonus		= 1,
fireBonus		= 2,
fireMaxBonus	= 3,
bombeBonus		= 4,
radioBombeBonus	= 5,
kickBonus		= 6,
gloveBonus		= 7,
bubbleBonus		= 8,
powerBombeBonus	= 9,
getaBonus		= 10,
ghostBonus		= 11,
eggsBonus		= 12,
*/


LevelService LevelService::m_instance = LevelService();

LevelService::LevelService() {
	fprintf(stderr, "Init LevelService system\n");
	initLevel();
}

LevelService::~LevelService() {
	levels.clear();
	fprintf(stderr, "close LevelService system\n");
}

LevelService& LevelService::Instance() {
	return m_instance;
}

void LevelService::initLevel(){
	createLevel0();
	createLevel1();
	createLevel2();
	createLevel3();
	createLevel4();
	createLevel5();
	createLevel6();
	createLevel7();
	createLevel8();
//	fprintf(stderr,"\n\n\n\n");
//	for(unsigned int i = 0; i < levels.size(); i++){
//		fprintf(stderr,"******************************  level : %i - %s  ******************************\n", i, levels[i]->getName());
//		fprintf(stderr,"*** Variante nÂ° : %d ***\n", levels[i]->getVariantesSize());
//		if(levels[i]->getVariantesSize() > 0){
//			for(int j = 0;j<levels[i]->getVariantesSize();j++){
//				for(int k = 0;k<21;k++){
//					for(int l = 0;l<35;l++){
//						fprintf(stderr," %2i,", levels[i]->getVariantes(j)->getDefinition(k*35+l));
//					}
//					fprintf(stderr,"\n");
//				}
//				fprintf(stderr,"reserved spot : \n");
//				for(int k = 0;k<21;k++){
//					for(int l = 0;l<35;l++){
//						fprintf(stderr," %2i,", levels[i]->getVariantes(j)->isReserved(k*35+l));
//					}
//					fprintf(stderr,"\n");
//				}
//				
//				fprintf(stderr,"\nbonus : ");
//				for(int k = 0;k<13;k++){
//					fprintf(stderr,"%2i,", levels[i]->getVariantes(j)->getBonus(k));
//				}
//				fprintf(stderr,"\nstart point : ");
//				for(int k = 0;k<16;k++){
//					int idx = levels[i]->getVariantes(j)->getStart(k);
//					fprintf(stderr,"%i:%i,  ", idx%35, idx/35);
//				}
//				fprintf(stderr,"\ndescription : %s", levels[i]->getVariantes(j)->getDescription());
//				fprintf(stderr,"\nis filled with bricks : %i", levels[i]->getVariantes(j)->isFillWithBricks());
//				fprintf(stderr,"\n\n\n\n");
//			}
//		}
//	}
}


void LevelService::createLevel0(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,
					 10,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
					  5,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6};
	int bonus[13]= {  3, 12, 18,  0, 18,  0, 12,  0,  0,  0,  0,  0, 15};

	int descV2[735] = {   0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,
						 10,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
						  5,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6};	
	int bonusV2[13]= {  1, 1, 2,  0, 2,  0, 2,  0,  0,  0,  0,  0, 1};

	Level * level = new Level(0, "Blockbuster");
	LevelVariante * variante = new LevelVariante(0, "classic level", "classic level", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	level->addVariante(variante);

	LevelVariante * variante1 = new LevelVariante(1, "level without bricks", "level without bricks", false, descV2, bonusV2, 6, 6);
	variante1->textureIsAWall(0,17);
	level->addVariante(variante1);
	levels.push_back(level);
}

void LevelService::createLevel1(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,
					 10,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
					  5,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6};	
	int bonus[13]= {  3,  6, 15,  0, 18,  3,  9,  6,  6,  0,  0,  0, 15};
	Level * level = new Level(1, "Merry-Go-Round");
	LevelVariante * variante = new LevelVariante(1, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	level->addVariante(variante);
	levels.push_back(level);
}

void LevelService::createLevel2(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  3, 18,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3, 18,  4,  2,  2,  2,  2,  2,  1,
					 10,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
					  5,  7,  7,  7,  7,  7,  8, 18,  9,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,  9,  7,  7,  7,  7,  7,  6};
	int bonus[13]= {  3, 12, 18,  0, 18,  0,  6,  0,  0,  0,  0,  0, 15};
	int desc2[735] = { 0,  2,  2,  2,  2,  2,  3, 18,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3, 18,  4,  2,  2,  2,  2,  2,  1,
						 10,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18,'W','W','W', 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18,'W', 40,'W', 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16,'S', 16, 18,'W','W','W', 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
						 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
						 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
						  5,  7,  7,  7,  7,  7,  8, 18,  9,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,  9,  7,  7,  7,  7,  7,  6};
	int bonus2[13]= {  3, 2, 3,  0, 3,  0,  1,  0,  0,  0,  0,  0, 2};
	Level * level = new Level(1, "Splish-Splash");
	LevelVariante * variante = new LevelVariante(0, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	level->addVariante(variante);

	LevelVariante * variante1 = new LevelVariante(1, "Niveau Classique", "Niveau Classique", false, desc2, bonus2, 2, 2);
	variante1->textureIsAWall(0,17);
	variante1->textureIsAWall('W');
	variante1->textureIsAWall(40);
	level->addVariante(variante1);
	levels.push_back(level);
}

void LevelService::createLevel3(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,
					 10,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
					  5,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8,  7,  8};
	int bonus[13]= {  3, 12, 18,  0, 18,  0,  6,  0,  6,  0,  0,  0, 15};
	Level * level = new Level(1, "Peekaboo");
	LevelVariante * variante = new LevelVariante(1, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	level->addVariante(variante);
	levels.push_back(level);
}

void LevelService::createLevel4(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,
					 11,'T', 19, 19, 19, 19, 19, 18, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 18, 19, 19, 19, 19, 19,'T', 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 28, 18, 29, 18, 16, 18, 16, 18, 28, 18, 29, 18, 16, 18, 16, 18, 28, 18, 29, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 20, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 28, 18, 29, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 14,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 28, 18, 29, 18, 16, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 14,
					 10, 18, 16, 18, 28, 18, 29,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 28,'S', 29, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 14,
					 10, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 16, 18, 16, 18, 28, 18, 29, 18, 16, 18, 16, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 30, 40, 31, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 32, 18, 33, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 14,
					  5,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6};
	int bonus[13]= {  3,  6, 18,  0, 18,  0,  6,  6,  0,  0,  0,  0, 15};
	Level * level = new Level(1, "Slip N' Slide");
	LevelVariante * variante = new LevelVariante(1, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	variante->textureIsAWall(28);
	variante->textureIsAWall(29);
	variante->textureIsAWall(32);
	variante->textureIsAWall(33);
	variante->textureIsAWall('W');
	variante->texturedrawInsky(40);
	level->addVariante(variante);
	levels.push_back(level);
}

void LevelService::createLevel5(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  3, 19,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3, 19,  4,  2,  2,  2,  2,  2,  1,
					 11,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 14,
					  5,  9,  7,  8,  9,  7,  8, 20,  9,  7,  8,  9,  7,  8,  9,  7,  8,  9,  7,  8,  9,  7,  8,  9,  7,  8,  8, 20,  9,  7,  8,  9,  7,  8,  6};
	int bonus[13]= {  3, 12, 18,  0, 18,  0, 18,  0,  0,  0,  0,  0, 15};
	Level * level = new Level(1, "Move N' Groove");
	LevelVariante * variante = new LevelVariante(1, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	level->addVariante(variante);
	levels.push_back(level);
}

void LevelService::createLevel6(){
	int desc[735] ={  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,
					 10,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
					  5,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6};
	int bonus[13]= {  3,  6, 18,  0, 18,  6,  9,  0,  6,  0,  0,  0, 15};
	Level * level = new Level(1, "Sandman");
	LevelVariante * variante = new LevelVariante(1, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	level->addVariante(variante);
	levels.push_back(level);
}

void LevelService::createLevel7(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,
					 10,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 18, 18, 18, 30, 31, 31, 31, 29, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 30, 31, 29, 18, 18, 18, 18, 18, 18, 18, 18, 13,
					 10, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 18, 30, 31, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 30, 31, 34, 18, 18, 18, 18, 18, 18, 28, 32, 18, 18, 13,
					 10, 18, 16, 33, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 33, 16, 18, 16, 18, 16,'S', 16, 18, 16, 33, 16, 18, 13,
					 10, 18, 18, 33, 18, 18, 18, 30, 31, 31, 31, 32, 18, 18, 18, 18, 18, 18, 18, 18, 18, 35, 31, 32, 18, 18, 18, 18, 18, 18, 18, 33, 18, 18, 13,
					 10, 18, 16, 33, 16, 18, 16, 33, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 33, 16, 18, 13,
					 10, 18, 18, 35, 31, 31, 31, 34, 18, 18, 28, 34, 18, 18, 18, 18, 18, 28, 31, 31, 31, 32, 18, 35, 31, 32, 18, 18, 18, 30, 31, 34, 18, 18, 13,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 33, 16, 18, 16, 33, 16, 18, 16, 33, 16, 18, 16,'S', 13,
					 10, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 30, 31, 29, 18, 18, 18, 18, 18, 18, 18, 35, 31, 31, 31, 34, 18, 18, 28, 34, 18, 18, 18, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 18, 18, 18, 18, 18, 18, 18, 28, 31, 34, 18, 30, 29, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13,
					 10, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 18, 18, 28, 32, 18, 18, 18, 18, 18, 18, 18, 33, 18, 18, 18,'S', 18, 28, 31, 31, 31, 32, 18, 18, 18, 18, 18, 30, 31, 29, 18, 18, 13,
					 10, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 18, 16, 18, 16, 33, 16, 18, 16, 18, 16, 33, 16, 18, 16, 18, 13,
					 10, 18, 18, 18, 18, 35, 31, 31, 31, 32, 18, 30, 31, 34, 18, 18, 18, 18, 18, 18, 18, 18, 18, 35, 31, 31, 31, 32, 18, 33, 18, 18, 18, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 33, 16, 33, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 33, 16, 33, 16, 18, 16, 18, 13,
					 10,'S', 18, 18, 18, 18, 18, 18, 18, 35, 31,'S', 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,'S', 18, 18, 18, 35, 31, 34, 18, 18, 18,'S', 13,
					  5,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6};
	int bonus[13]= {  3, 12, 18,  0, 18,  0,  6,  6,  3,  0,  0,  0, 15};
	Level * level = new Level(1, "Spitfire");
	LevelVariante * variante = new LevelVariante(1, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	level->addVariante(variante);
	levels.push_back(level);
}

void LevelService::createLevel8(){
	int desc[735] = { 0,  2,  2,  2,  2,  2,  3, 18,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3, 18,  4,  2,  2,  2,  2,  2,  1,
					 11,'T', 19, 19, 19, 19, 19, 18, 19, 19, 19,'T', 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,'T', 19, 19, 19, 18, 19, 19, 19, 19, 19,'T', 13,
					 11, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 14,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 11, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 13,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 18, 18, 15,
					 11, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 13,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 14,
					 11, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 15,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 14,
					 10, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 14,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 15,
					 11, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16,'S', 16, 18, 16, 18, 16, 18, 15,
					 10, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 14,
					 11, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 40, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 13,
					 10, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 16, 18, 15,
					 10,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 20, 18, 20, 18, 20, 18, 20, 18, 20,'S', 13,
					  5,  7,  6,  6,  5,  7,  8, 18,  9,  7,  6,  6,  7,  7,  5,  7,  7,  5,  6,  6,  6,  7,  7,  5,  7,  7,  8, 18,  9,  7,  6,  6,  7,  5,  6};
	int bonus[13]= {  3,  9,  0,  0, 18,  0,  9,  0,  6,  0,  0,  0, 15};
	Level * level = new Level(1, "Jungle Boogie");
	LevelVariante * variante = new LevelVariante(1, "Niveau Classique", "Niveau Classique", true, desc, bonus, 2, 2);
	variante->textureIsAWall(0,17);
	variante->texturedrawInsky(40);
	level->addVariante(variante);
	levels.push_back(level);
}

Level * LevelService::getLevel(int n){
	return levels[n];
}

int LevelService::getNumberOfLevels(){
	return levels.size();
}
